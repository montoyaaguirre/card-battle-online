{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/controllers/board-controller.ts","src/core/card.ts","src/core/game-manager.ts","src/core/player.ts","src/main.ts","src/models/board-model.ts","src/views/board-view.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { Board } from '../models/board-model';\r\nimport { BoardView, CardView } from '../views/board-view';\r\nimport { GameManager, GameState } from '../core/game-manager';\r\n\r\nexport class BoardController {\r\n    private _model: Board;\r\n    private _view: BoardView;\r\n    private _gm: GameManager;\r\n\r\n    public constructor(model: Board, view: BoardView) {\r\n        this._model = model;\r\n        this._view = view;\r\n        this._gm = new GameManager(this._model.player, this._model.oponent);\r\n\r\n        // Bind handlers to view events\r\n        view.setCardClickHandler(this.handleEvent.bind(this));\r\n    }\r\n\r\n    public renderBoard(): void {\r\n        let cards = this._model.getPlayerCards();\r\n        let displayCards: CardView[] = [];\r\n        cards.forEach((card): void => {\r\n            displayCards.push({\r\n                points:card.points,\r\n                type: card.type});\r\n        })\r\n        this._view.renderPlayerCards(displayCards);\r\n        cards = this._model.getOponentCards();\r\n        displayCards = [];\r\n        cards.forEach((card): void => {\r\n            displayCards.push({\r\n                points:card.points,\r\n                type: card.type});\r\n        })\r\n        this._view.renderOponentCards(displayCards);\r\n        this._view.renderPlayerHealth(this._model.getPlayerHealth());\r\n        this._view.renderOponentHealth(this._model.getOponentHealth());\r\n        this._view.renderPlayerShield(this._model.getPlayerShield());\r\n        this._view.renderOponentShield(this._model.getOponentShield());\r\n    }\r\n\r\n    public handleEvent(event: Event): void {\r\n        event.stopPropagation();\r\n        switch(event.type){\r\n            case \"click\":\r\n                this.clickHandler(event.currentTarget as HTMLElement);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    private clickHandler(element: HTMLElement): void{\r\n        if (this._gm.getState() === GameState.playerTurn) {\r\n            this._model.playPlayerCard(parseInt(element.id));\r\n            this.renderBoard();\r\n            this._gm.endPlayerTurn();\r\n            // TODO: Start and wait for Animation\r\n            this._gm.endPlayerAnimation();\r\n            if (this._gm.getState() === GameState.gameOver) {\r\n                this._gameover();\r\n            } else {\r\n                this._oponentTurn();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _oponentTurn(): void {\r\n        if (this._gm.getState() === GameState.oponentTurn) {\r\n            // TODO: get card index from AI\r\n            const cardIndex = 0;\r\n            this._model.playOponentCard(cardIndex);\r\n            this.renderBoard();\r\n            this._gm.endOponentTurn();\r\n            // TODO: Start and wait for Animation\r\n            this._gm.endOponentAnimation();\r\n        }\r\n        if (this._gm.getState() === GameState.gameOver) {\r\n            this._gameover();\r\n        }\r\n    }\r\n\r\n    private _gameover(): void {\r\n        console.log(\"GAME OVER!\");\r\n        this._newGame();\r\n    }\r\n\r\n    private _newGame(): void {\r\n        console.log(\"Staring a new game.\");\r\n        this._model.newGame();\r\n        this.renderBoard();\r\n        this._gm.newGame(this._model.player, this._model.oponent);\r\n    }\r\n}\r\n","export enum CardType {\r\n    heal,\r\n    attack,\r\n    shield\r\n}\r\nexport class Card {\r\n    private _points: number;\r\n    private _type: CardType;\r\n\r\n    public constructor(points: number, type: CardType) {\r\n        this._points = points;\r\n        this._type = type;\r\n    }\r\n\r\n    public get points(): number {\r\n        return this._points;\r\n    }\r\n\r\n    public get type(): CardType {\r\n        return this._type;\r\n    }\r\n\r\n    public randomize(): void {\r\n        this._points = this._getRandomInt(1, 4);\r\n        this._type = this._getRandomCardType();\r\n    }\r\n\r\n    private _getRandomInt(min: number, max: number): number {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n\r\n    private _getRandomCardType(): CardType {\r\n        const index = this._getRandomInt(0, 5);\r\n        switch (index) {\r\n            case 0:\r\n                return CardType.shield;\r\n            case 1:\r\n                return CardType.heal;\r\n            default:\r\n                return CardType.attack;\r\n        }\r\n    }\r\n}\r\n","import { Player } from './player';\r\n\r\nexport enum GameState {\r\n    paused,\r\n    playerTurn,\r\n    oponentTurn,\r\n    playerAnimation,\r\n    oponentAnimation,\r\n    gameOver\r\n}\r\n\r\nexport class GameManager {\r\n    private _gameState: GameState = GameState.playerTurn;\r\n    private _player: Player;\r\n    private _oponent: Player;\r\n\r\n    public constructor(player: Player, oponent: Player) {\r\n        this.newGame(player, oponent);\r\n    }\r\n\r\n    public getState(): GameState {\r\n        return this._gameState;\r\n    }\r\n\r\n    public endPlayerTurn(): void {\r\n        if ( this._gameState === GameState.playerTurn) {\r\n            this._gameState = GameState.playerAnimation;\r\n        }\r\n    }\r\n\r\n    public endOponentTurn(): void {\r\n        if ( this._gameState === GameState.oponentTurn) {\r\n            this._gameState = GameState.oponentAnimation;\r\n        }\r\n    }\r\n\r\n    public endPlayerAnimation(): void {\r\n        if (this._oponent.health > 0) {\r\n            this._gameState = GameState.oponentTurn;\r\n        } else {\r\n            this._gameState = GameState.gameOver;\r\n        }\r\n    }\r\n\r\n    public endOponentAnimation(): void {\r\n        if (this._player.health > 0) {\r\n            this._gameState = GameState.playerTurn;\r\n        } else {\r\n            this._gameState = GameState.gameOver;\r\n        }\r\n    }\r\n\r\n    public newGame(player: Player, oponent: Player): void {\r\n        this._player = player;\r\n        this._oponent = oponent;\r\n        this._gameState = GameState.playerTurn;\r\n    }\r\n}\r\n","import {Card, CardType} from './card';\r\nimport { Deck } from './deck';\r\n\r\nexport class Player {\r\n    private _maxHealth = 10;\r\n    private _maxShield = 2;\r\n    private _health: number;\r\n    private _shield: number;\r\n    private _cards: Card[];\r\n    private _deck: Deck;\r\n\r\n    public constructor(health: number, shield: number, cards: Card[]) {\r\n        this._health = health;\r\n        this._shield = shield;\r\n        this._cards = this._cloneCards(cards);\r\n    }\r\n\r\n    private _cloneCards(cards: Card[]): Card[] {\r\n        let clones: Card[] = [];\r\n        cards.forEach(function (card): void {\r\n            clones.push(new Card(card.points, card.type));\r\n        });\r\n        return clones;\r\n    }\r\n\r\n    public get health(): number {\r\n        return this._health;\r\n    }\r\n\r\n    public set health(health: number) {\r\n        this._health = health;\r\n        this._health = Math.min(Math.max(this._health, 0), this._maxHealth);\r\n    }\r\n\r\n    public get shield(): number {\r\n        return this._shield;\r\n    }\r\n\r\n    public set shield(shield: number) {\r\n        this._shield = shield;\r\n        this._shield = Math.min(Math.max(this._shield, 0), this._maxShield);\r\n    }\r\n\r\n    public get cards(): Card[] {\r\n        return this._cards;\r\n    }\r\n\r\n    public set cards(cards: Card[]) {\r\n        this._cards = cards;\r\n    }\r\n\r\n    public useCard(index: number): void {\r\n        const card = this._cards[index];\r\n        card.randomize(); // Simulate discarding card and drawing a new one.\r\n    }\r\n\r\n    public applyEffects(card: Card): void {\r\n        switch(card.type) {\r\n            case CardType.heal: {\r\n                this.health += card.points;\r\n                break;\r\n            }\r\n            case CardType.shield: {\r\n                this.shield += card.points;\r\n                break;\r\n            }\r\n            case CardType.attack: {\r\n                this._receiveAttack(card.points);\r\n                break;\r\n            }\r\n            default: {\r\n                console.log(`Card type: '${card.type}' not found.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _receiveAttack(points: number): void {\r\n        if (this.shield > 0) {\r\n            this.shield -= points;\r\n        } else {\r\n            this.health -= points;\r\n        }\r\n    }\r\n}\r\n","import { BoardView } from \"./views/board-view\";\r\nimport { BoardController } from \"./controllers/board-controller\";\r\nimport { Board } from \"./models/board-model\";\r\n\r\nconst model = new Board();\r\nconst view = new BoardView();\r\nconst controller = new BoardController(model, view);\r\ncontroller.renderBoard();\r\n","import { Player } from '../core/player';\r\nimport { Card, CardType } from '../core/card';\r\n\r\nexport class Board {\r\n    private _player: Player;\r\n    private _oponent: Player;\r\n\r\n    public constructor() {\r\n        const cards = [\r\n            new Card(3, CardType.heal),\r\n            new Card(1, CardType.shield),\r\n            new Card(1, CardType.attack),\r\n            new Card(3, CardType.attack),\r\n            new Card(2, CardType.shield)\r\n        ]\r\n        this._oponent = new Player(10, 0, cards);\r\n        this._player = new Player(10, 0, cards);\r\n    }\r\n\r\n    public newGame(): void {\r\n        this._oponent.health = 10;\r\n        this._player.health = 10;\r\n        this._oponent.shield = 0;\r\n        this._player.shield = 0;\r\n    }\r\n\r\n    public playPlayerCard(index: number): void {\r\n        const card = this._player.cards[index];\r\n        if(card.type === CardType.attack) {\r\n            this._oponent.applyEffects(card);\r\n        } else {\r\n            this._player.applyEffects(card)\r\n        }\r\n        this._player.useCard(index);\r\n    }\r\n\r\n    public playOponentCard(index: number): void {\r\n        const card = this._oponent.cards[index];\r\n        if(card.type === CardType.attack) {\r\n            this._player.applyEffects(card);\r\n        } else {\r\n            this._oponent.applyEffects(card)\r\n        }\r\n        this._oponent.useCard(index);\r\n    }\r\n\r\n    public getPlayerCards(): Card[] {\r\n        return this._player.cards;\r\n    }\r\n\r\n    public getOponentCards(): Card[] {\r\n        return this._oponent.cards;\r\n    }\r\n\r\n    public getPlayerHealth(): number {\r\n        return this._player.health;\r\n    }\r\n\r\n    public getOponentHealth(): number {\r\n        return this._oponent.health;\r\n    }\r\n\r\n    public getPlayerShield(): number {\r\n        return this._player.shield;\r\n    }\r\n\r\n    public getOponentShield(): number {\r\n        return this._oponent.shield;\r\n    }\r\n\r\n    public get player(): Player {\r\n        return this._player;\r\n    }\r\n\r\n    public get oponent(): Player {\r\n        return this._oponent;\r\n    }\r\n}\r\n","export interface CardView {\r\n    points: number;\r\n    type: number;\r\n}\r\n\r\nexport class BoardView {\r\n    private _cardTypes = [\"❤️\", \"⚔️\", \"🛡️\"];\r\n\r\n    public setCardClickHandler(handler: EventListenerObject): void {\r\n        let cards = document.querySelectorAll('#player-cards .card');\r\n        cards.forEach( (element): void => {\r\n            element.addEventListener('click', handler);\r\n        });\r\n    }\r\n\r\n    public renderPlayerHealth(health: number): void {\r\n        this._renderHealth(health, document.querySelector(`#player-health`));\r\n    }\r\n\r\n    public renderOponentHealth(health: number): void {\r\n        this._renderHealth(health, document.querySelector(`#oponent-health`));\r\n    }\r\n\r\n    public renderPlayerCards(cards: CardView[]): void {\r\n        this._renderCards(cards, this._getPlayerCards());\r\n    }\r\n\r\n    public renderOponentCards(cards: CardView[]): void {\r\n        this._renderCards(cards, this._getOponentCards());\r\n    }\r\n\r\n    public renderPlayerShield(shields: number): void {\r\n        this._renderShields(shields, document.querySelector(`#player-shield`));\r\n    }\r\n\r\n    public renderOponentShield(shields: number): void {\r\n        this._renderShields(shields, document.querySelector(`#oponent-shield`));\r\n    }\r\n\r\n    private _renderCards(cards: CardView[], nodes: NodeListOf<Element>): void {\r\n        for (let i = 0; i < cards.length; i++){\r\n            nodes[i].innerHTML = this._cardTemplate(\r\n                cards[i].points,\r\n                cards[i].type\r\n            );\r\n        }\r\n    }\r\n\r\n    private _renderHealth(health: number, node: Element): void {\r\n        node.innerHTML = this._healthTemplate(health);\r\n    }\r\n\r\n    private _renderShields(shields: number, node: Element): void {\r\n        node.innerHTML = this._shieldTemplate(shields);\r\n    }\r\n\r\n    private _getPlayerCards(): NodeListOf<Element> {\r\n        return this._getCards('player-cards');\r\n    }\r\n\r\n    private _getOponentCards(): NodeListOf<Element> {\r\n        return this._getCards('oponent-cards');\r\n    }\r\n\r\n    private _getCards(containerID: string): NodeListOf<Element> {\r\n        return document.querySelectorAll(`#${containerID} .card`);\r\n    }\r\n\r\n    private _cardTemplate(\r\n        points: number,\r\n        type: number\r\n    ): string {\r\n        let template = \"\";\r\n        const cardLabel = points.toString();\r\n        const cardSuit = this._cardTypes[type];\r\n        template = `\r\n            <div class=\"card-value-top\">${cardLabel}</div>\r\n            <div class=\"card-suit\">${cardSuit}</div>\r\n            <div class=\"card-value-bottom\">${cardLabel}</div>\r\n        `\r\n        return template;\r\n    }\r\n\r\n    private _healthTemplate(\r\n        health: number\r\n    ): string {\r\n        let template = \"\";\r\n        for (let i = 0; i < 10; i++) {\r\n            if (health <= i) {\r\n                template += '<div class=\"health-indicator\">🖤</div>\\n';\r\n            } else {\r\n                template += '<div class=\"health-indicator\">❤️</div>\\n';\r\n            }\r\n        }\r\n        return template;\r\n    }\r\n\r\n    private _shieldTemplate(\r\n        shield: number\r\n    ): string {\r\n        let template = \"\";\r\n        for (let i = 0; i < shield; i++) {\r\n            template += '<div class=\"shield-indicator\">🛡️</div>\\n';\r\n        }\r\n        return template;\r\n    }\r\n}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}