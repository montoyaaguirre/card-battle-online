{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/controllers/board-controller.ts","src/core/card.ts","src/core/player.ts","src/main.ts","src/models/board-model.ts","src/views/board-view.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { Board } from '../models/board-model';\r\nimport { BoardView, CardView } from '../views/board-view';\r\n\r\nexport class BoardController {\r\n    private _model: Board;\r\n    private _view: BoardView;\r\n\r\n    public constructor(model: Board, view: BoardView) {\r\n        this._model = model;\r\n        this._view = view;\r\n\r\n        // Bind handlers to view events\r\n        view.setCardClickHandler(this.handleEvent.bind(this));\r\n    }\r\n\r\n    public renderBoard(): void {\r\n        let cards = this._model.getPlayerCards();\r\n        let displayCards: CardView[] = [];\r\n        cards.forEach((card): void => {\r\n            displayCards.push({\r\n                points:card.points,\r\n                type: card.type});\r\n        })\r\n        this._view.renderPlayerCards(displayCards);\r\n        cards = this._model.getOponentCards();\r\n        displayCards = [];\r\n        cards.forEach((card): void => {\r\n            displayCards.push({\r\n                points:card.points,\r\n                type: card.type});\r\n        })\r\n        this._view.renderOponentCards(displayCards);\r\n    }\r\n\r\n    public handleEvent(event: Event): void {\r\n        event.stopPropagation();\r\n        switch(event.type){\r\n            case \"click\":\r\n                this.clickHandler(event.target as HTMLElement);\r\n                break;\r\n            default:\r\n                console.log(event.target);\r\n        }\r\n    }\r\n\r\n    private clickHandler(element: HTMLElement): void{\r\n        if (element.id) {\r\n            this._model.playPlayerCard(parseInt(element.id));\r\n            this.renderBoard();\r\n        }\r\n    }\r\n}\r\n","export enum CardType {\r\n    heal,\r\n    attack,\r\n    shield\r\n}\r\nexport class Card {\r\n    private _points: number;\r\n    private _type: CardType;\r\n\r\n    public constructor(points: number, type: CardType) {\r\n        this._points = points;\r\n        this._type = type;\r\n    }\r\n\r\n    public get points(): number {\r\n        return this._points;\r\n    }\r\n\r\n    public get type(): CardType {\r\n        return this._type;\r\n    }\r\n\r\n    public randomize(): void {\r\n        this._points = this._getRandomInt(1, 4);\r\n        this._type = this._getRandomCardType();\r\n    }\r\n\r\n    private _getRandomInt(min: number, max: number): number {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n\r\n    private _getRandomCardType(): CardType {\r\n        const index = this._getRandomInt(0, 3);\r\n        switch (index) {\r\n            case 0:\r\n                return CardType.attack;\r\n            case 1:\r\n                return CardType.heal;\r\n            default:\r\n                return CardType.shield;\r\n        }\r\n    }\r\n}\r\n","import {Card, CardType} from './card';\r\nimport { Deck } from './deck';\r\n\r\nexport class Player {\r\n    private _maxHealth = 10;\r\n    private _maxShield = 2;\r\n    private _health: number;\r\n    private _shield: number;\r\n    private _cards: Card[];\r\n    private _deck: Deck;\r\n\r\n    public constructor(health: number, shield: number, cards: Card[]) {\r\n        this._health = health;\r\n        this._shield = shield;\r\n        this._cards = this._cloneCards(cards);\r\n    }\r\n\r\n    private _cloneCards(cards: Card[]): Card[] {\r\n        let clones: Card[] = [];\r\n        cards.forEach(function (card): void {\r\n            clones.push(new Card(card.points, card.type));\r\n        });\r\n        return clones;\r\n    }\r\n\r\n    public get health(): number {\r\n        return this._health;\r\n    }\r\n\r\n    public set health(health: number) {\r\n        this._health = health;\r\n        this._health = Math.min(Math.max(this._health, 0), this._maxHealth);\r\n    }\r\n\r\n    public get shield(): number {\r\n        return this._shield;\r\n    }\r\n\r\n    public set shield(shield: number) {\r\n        this._shield = shield;\r\n        this._shield = Math.min(Math.max(this._shield, 0), this._maxShield);\r\n    }\r\n\r\n    public get cards(): Card[] {\r\n        return this._cards;\r\n    }\r\n\r\n    public set cards(cards: Card[]) {\r\n        this._cards = cards;\r\n    }\r\n\r\n    public useCard(index: number): void {\r\n        const card = this._cards[index];\r\n        console.log(`Used card at index ${index}\\nType: ${card.type} Points: ${card.points}`);\r\n        card.randomize(); // Simulate discarding card and drawing a new one.\r\n    }\r\n\r\n    public applyEffects(card: Card): void {\r\n        switch(card.type) {\r\n            case CardType.heal: {\r\n                this.health += card.points;\r\n                break;\r\n            }\r\n            case CardType.shield: {\r\n                this.shield += card.points;\r\n                break;\r\n            }\r\n            case CardType.attack: {\r\n                this._receiveAttack(card.points);\r\n                break;\r\n            }\r\n            default: {\r\n                console.log(`Card type: '${card.type}' not found.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _receiveAttack(points: number): void {\r\n        if (this.shield > 0) {\r\n            this._shield -= points;\r\n        } else {\r\n            this._health -= points;\r\n        }\r\n    }\r\n}\r\n","import { BoardView } from \"./views/board-view\";\r\nimport { BoardController } from \"./controllers/board-controller\";\r\nimport { Board } from \"./models/board-model\";\r\n\r\nconst model = new Board();\r\nconst view = new BoardView();\r\nconst controller = new BoardController(model, view);\r\ncontroller.renderBoard();\r\n","import { Player } from '../core/player';\r\nimport { Card, CardType } from '../core/card';\r\n\r\nexport class Board {\r\n    private _player: Player;\r\n    private _oponent: Player;\r\n\r\n    public constructor() {\r\n        const cards = [\r\n            new Card(3, CardType.heal),\r\n            new Card(1, CardType.shield),\r\n            new Card(1, CardType.attack),\r\n            new Card(3, CardType.attack),\r\n            new Card(2, CardType.shield)\r\n        ]\r\n        this._player = new Player(10, 0, cards);\r\n        this._oponent = new Player(10, 0, cards);\r\n    }\r\n\r\n    public playPlayerCard(index: number): void {\r\n        this._player.useCard(index);\r\n        const card = this._player.cards[index];\r\n        if(card.type === CardType.attack) {\r\n            this._oponent.applyEffects(card);\r\n        } else {\r\n            this._player.applyEffects(card)\r\n        }\r\n        // Emit change in cards for view update\r\n    }\r\n\r\n    public getPlayerCards(): Card[] {\r\n        return this._player.cards;\r\n    }\r\n\r\n    public getOponentCards(): Card[] {\r\n        return this._oponent.cards;\r\n    }\r\n}\r\n","export interface CardView {\r\n    points: number;\r\n    type: number;\r\n}\r\n\r\nexport class BoardView {\r\n    private _cardTypes = [\"❤️\", \"⚔️\", \"🛡️\"];\r\n\r\n    public setCardClickHandler(handler: EventListenerObject): void {\r\n        let cards = document.querySelectorAll('#player-cards .card');\r\n        cards.forEach( (element): void => {\r\n            element.addEventListener('click', handler);\r\n        });\r\n    }\r\n\r\n    public renderPlayerCards(cards: CardView[]): void {\r\n        this._renderCards(cards, this._getPlayerCards());\r\n    }\r\n\r\n    public renderOponentCards(cards: CardView[]): void {\r\n        this._renderCards(cards, this._getOponentCards());\r\n    }\r\n\r\n    private _renderCards(cards: CardView[], nodes: NodeListOf<Element>): void {\r\n        for (let i = 0; i < cards.length; i++){\r\n            nodes[i].innerHTML = this._cardTemplate(\r\n                i,\r\n                cards[i].points,\r\n                cards[i].type\r\n            );\r\n        }\r\n    }\r\n\r\n    private _getPlayerCards(): NodeListOf<Element> {\r\n        return this._getCards('player-cards');\r\n    }\r\n\r\n    private _getOponentCards(): NodeListOf<Element> {\r\n        return this._getCards('oponent-cards');\r\n    }\r\n\r\n    private _getCards(containerID: string): NodeListOf<Element> {\r\n        return document.querySelectorAll(`#${containerID} .card`);\r\n    }\r\n\r\n    private _cardTemplate(\r\n        cardindex: number,\r\n        points: number,\r\n        type: number\r\n    ): string {\r\n        let template = \"\";\r\n        const cardLabel = points.toString();\r\n        const cardSuit = this._cardTypes[type];\r\n        template = `\r\n            <div id=\"${cardindex}\" class=\"card-value-top\">${cardLabel}</div>\r\n            <div id=\"${cardindex}\" class=\"card-suit\">${cardSuit}</div>\r\n            <div id=\"${cardindex}\" class=\"card-value-bottom\">${cardLabel}</div>\r\n        `\r\n        return template;\r\n    }\r\n}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}